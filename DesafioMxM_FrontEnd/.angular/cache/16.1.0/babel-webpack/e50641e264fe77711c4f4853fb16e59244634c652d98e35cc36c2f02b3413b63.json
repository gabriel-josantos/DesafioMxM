{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet FormComponent = class FormComponent {\n  constructor(formBuilder) {\n    this.formBuilder = formBuilder;\n    this.checkboxOptions = ['Pessoa física', 'Pessoa juridica'];\n    this.formData = [{\n      label: 'Nome completo',\n      name: 'name',\n      placeholder: 'nome'\n    }, {\n      label: 'CPF',\n      name: 'legalId',\n      placeholder: '000.000.000-00'\n    }, {\n      label: 'Email',\n      name: 'email',\n      placeholder: 'example@gmail.com'\n    }, {\n      label: 'Telefone',\n      name: 'phoneNumber',\n      placeholder: '(99) 9 9999-9999'\n    }, {\n      label: 'CEP',\n      name: 'postalCode',\n      placeholder: '00000-000'\n    }, {\n      label: 'Estado',\n      name: 'state',\n      placeholder: 'estado'\n    }, {\n      label: 'Cidade',\n      name: 'city',\n      placeholder: 'cidade'\n    }, {\n      label: 'Bairro',\n      name: 'neighborhood',\n      placeholder: 'bairro'\n    }, {\n      label: 'Rua',\n      name: 'street',\n      placeholder: 'rua'\n    }, {\n      label: 'Número',\n      name: 'addressNumber',\n      placeholder: 'número'\n    }, {\n      label: 'Complemento',\n      name: 'complement',\n      placeholder: 'complemento'\n    }];\n    this.formRegister = this.formBuilder.group({\n      type: ['Pessoa física'],\n      name: ['', Validators.required],\n      legalId: ['', Validators.required],\n      email: ['', Validators.required],\n      phoneNumber: ['', Validators.required],\n      postalCode: ['', Validators.required],\n      state: ['', Validators.required],\n      city: ['', Validators.required],\n      neighborhood: ['', Validators.required],\n      street: ['', Validators.required],\n      addressNumber: ['', Validators.required],\n      complement: ['']\n    });\n    this.showErrors = false;\n    this.isLoading = false;\n    this.isSubmitting = false;\n    this.showModal = false;\n  }\n  ngOnInit() {}\n  ngDoCheck() {\n    // console.log(this.checkboxSelectedOption);\n  }\n  valueBasedOnCpfOrCnpj(value1, value2) {\n    return this.formRegister.value.type === 'Pessoa física' ? value1 : value2;\n  }\n  updateFormData(option) {\n    console.log(this.formRegister.value);\n    if (option === 'Pessoa juridica') {\n      this.formData[0].label = 'Nome da empresa';\n      this.formData[1].label = 'CNPJ';\n      this.formData[1].placeholder = '00.000.000/0000-00';\n    } else {\n      console.log(this.formData);\n      this.formData[0].label = 'Nome completo';\n      this.formData[1].label = 'CPF';\n      this.formData[1].placeholder = '000.000.000-00';\n    }\n  }\n  submitForm() {\n    if (this.formRegister.valid) {\n      // console.log(this.formRegister);\n      // const headers = {\n      //   'Content-Type': 'application/json',\n      // };\n      // this.http.post(\n      //   'https://localhost:7042/users',\n      //   JSON.stringify(this.formRegister),\n      //   { headers }\n      // );\n      // data.type = selectedOption;\n      // data.legalId = cleanMask(data.legalId);\n      // data.phoneNumber = cleanMask(data.phoneNumber);\n      // data.postalCode = cleanMask(data.postalCode);\n      // console.log(data);\n      // this.isSubmitting = true;\n      // this.showErrors = false;\n      this.formRegister.reset();\n    }\n    this.showErrors = true;\n  }\n};\nFormComponent = __decorate([Component({\n  selector: 'app-form',\n  templateUrl: './form.component.html',\n  styleUrls: ['./form.component.scss']\n})], FormComponent);\nexport { FormComponent };","map":{"version":3,"names":["Component","Validators","FormComponent","constructor","formBuilder","checkboxOptions","formData","label","name","placeholder","formRegister","group","type","required","legalId","email","phoneNumber","postalCode","state","city","neighborhood","street","addressNumber","complement","showErrors","isLoading","isSubmitting","showModal","ngOnInit","ngDoCheck","valueBasedOnCpfOrCnpj","value1","value2","value","updateFormData","option","console","log","submitForm","valid","reset","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\gabri\\OneDrive\\Área de Trabalho\\DesafioMxMAngular\\DesafioMxM_FrontEnd\\src\\app\\modules\\home\\components\\form\\form.component.ts"],"sourcesContent":["import { Component, OnInit, DoCheck } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { FormData } from '../../models/FormData';\nimport { HttpClient } from '@angular/common/http';\n\n@Component({\n  selector: 'app-form',\n  templateUrl: './form.component.html',\n  styleUrls: ['./form.component.scss'],\n})\nexport class FormComponent implements OnInit, DoCheck {\n  public checkboxOptions: Array<string> = ['Pessoa física', 'Pessoa juridica'];\n\n  public formData: Array<FormData> = [\n    { label: 'Nome completo', name: 'name', placeholder: 'nome' },\n    { label: 'CPF', name: 'legalId', placeholder: '000.000.000-00' },\n    { label: 'Email', name: 'email', placeholder: 'example@gmail.com' },\n    { label: 'Telefone', name: 'phoneNumber', placeholder: '(99) 9 9999-9999' },\n    { label: 'CEP', name: 'postalCode', placeholder: '00000-000' },\n    { label: 'Estado', name: 'state', placeholder: 'estado' },\n    { label: 'Cidade', name: 'city', placeholder: 'cidade' },\n    { label: 'Bairro', name: 'neighborhood', placeholder: 'bairro' },\n    { label: 'Rua', name: 'street', placeholder: 'rua' },\n    { label: 'Número', name: 'addressNumber', placeholder: 'número' },\n    { label: 'Complemento', name: 'complement', placeholder: 'complemento' },\n  ];\n\n  public formRegister: FormGroup = this.formBuilder.group({\n    type: ['Pessoa física'],\n    name: ['', Validators.required],\n    legalId: ['', Validators.required],\n    email: ['', Validators.required],\n    phoneNumber: ['', Validators.required],\n    postalCode: ['', Validators.required],\n    state: ['', Validators.required],\n    city: ['', Validators.required],\n    neighborhood: ['', Validators.required],\n    street: ['', Validators.required],\n    addressNumber: ['', Validators.required],\n    complement: [''],\n  });\n\n  public showErrors: boolean = false;\n  public isLoading: boolean = false;\n  public isSubmitting: boolean = false;\n  public showModal: boolean = false;\n\n  constructor(private formBuilder: FormBuilder) {}\n\n  ngOnInit(): void {}\n\n  ngDoCheck(): void {\n    // console.log(this.checkboxSelectedOption);\n  }\n\n  public valueBasedOnCpfOrCnpj(value1: any, value2: any) {\n    return this.formRegister.value.type === 'Pessoa física' ? value1 : value2;\n  }\n\n  public updateFormData(option: string) {\n    console.log(this.formRegister.value);\n    if (option === 'Pessoa juridica') {\n      this.formData[0].label = 'Nome da empresa';\n      this.formData[1].label = 'CNPJ';\n      this.formData[1].placeholder = '00.000.000/0000-00';\n    } else {\n      console.log(this.formData);\n      this.formData[0].label = 'Nome completo';\n      this.formData[1].label = 'CPF';\n      this.formData[1].placeholder = '000.000.000-00';\n    }\n  }\n\n  public submitForm(): void {\n    if (this.formRegister.valid) {\n      // console.log(this.formRegister);\n      // const headers = {\n      //   'Content-Type': 'application/json',\n      // };\n\n      // this.http.post(\n      //   'https://localhost:7042/users',\n      //   JSON.stringify(this.formRegister),\n      //   { headers }\n      // );\n\n      // data.type = selectedOption;\n      // data.legalId = cleanMask(data.legalId);\n      // data.phoneNumber = cleanMask(data.phoneNumber);\n      // data.postalCode = cleanMask(data.postalCode);\n      // console.log(data);\n      // this.isSubmitting = true;\n\n      // this.showErrors = false;\n      this.formRegister.reset();\n    }\n    this.showErrors = true;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}